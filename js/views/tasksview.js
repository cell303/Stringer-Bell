// Generated by CoffeeScript 1.6.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['jquery', 'underscore', 'backbone', 'views/taskview', 'text!templates/tasks.html'], function($, _, Backbone, TaskView, tasksTemplate) {
    var TasksView, _ref;
    TasksView = (function(_super) {
      __extends(TasksView, _super);

      function TasksView() {
        this.add = __bind(this.add, this);
        this.render = __bind(this.render, this);
        _ref = TasksView.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      TasksView.prototype.initialize = function() {
        this.render();
        this.model.on('change:tag', this.render);
        return this.model.tasks.on('add', this.add);
      };

      TasksView.prototype.template = _.template(tasksTemplate);

      TasksView.prototype.sum = 0;

      TasksView.prototype.render = function() {
        var newTask,
          _this = this;
        newTask = function(task) {
          if (!_this.prevTask || (new Date(_this.prevTask.get("date"))).getDate() !== (new Date(task.get("date"))).getDate()) {
            _this.$el.find("#timeline").append('<p class="new-day">' + moment(task.get("date")).format("dddd, MMMM Do") + '</p>');
          }
          _this.sum += task.get("time");
          _this.view = new TaskView({
            model: task
          });
          _this.$el.find("#timeline").append(_this.view.render().el);
          return _this.prevTask = task;
        };
        this.$el.html(this.template(this.model.toJSON()));
        this.prevTask = null;
        this.tags = [];
        this.sum = 0;
        this.model.tasks.each(function(task) {
          var tag;
          if (_this.model.get("tag") != null) {
            tag = _this.model.get("tag");
            if ((task.attributes.tags != null) && _.contains(task.attributes.tags, tag)) {
              newTask(task);
            }
          } else {
            newTask(task);
          }
          return _.each(task.get("tags"), function(tag) {
            return _this.tags.push(tag);
          });
        });
        this.setSum();
        return this.setTags();
      };

      TasksView.prototype.add = function(task) {
        var view,
          _this = this;
        if (this.model.get("tag") != null) {
          task.set("text", "#" + this.model.get("tag"));
          task.set("tags", [this.model.get("tag")]);
        }
        this.sum += task.get("time");
        if (this.$el.find("#timeline .new-day").length === 0) {
          this.$el.find("#timeline").append('<p class="new-day">' + moment(task.get("date")).format("dddd, MMMM Do") + '</p>');
        }
        view = new TaskView({
          model: task
        });
        this.$el.find("#timeline .new-day").first().after(view.render().el);
        if ($(':focus').length === 0) {
          view.$el.find('textarea').focus();
        }
        _.each(task.get("tags"), function(tag) {
          return _this.tags.unshift(tag);
        });
        this.setSum();
        return this.setTags();
      };

      TasksView.prototype.setSum = function() {
        var hours, minutes;
        if (this.sum > 60) {
          hours = Math.floor(this.sum / 60);
          minutes = this.sum % 60;
          return this.$el.find("#sum").text(hours + 'h ' + minutes);
        } else {
          return this.$el.find("#sum").text(this.sum);
        }
      };

      TasksView.prototype.setTags = function() {
        var _this = this;
        this.tags = _.first(_.unique(this.tags), 10);
        this.$el.find("#tags").html('');
        return _.each(this.tags, function(tag) {
          return _this.$el.find("#tags").append('<a class="tag" href="#/tagged/' + tag + '" data-tag="' + tag + '">#' + tag + '</a> ');
        });
      };

      return TasksView;

    })(Backbone.View);
    return TasksView;
  });

}).call(this);
