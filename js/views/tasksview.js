// Generated by CoffeeScript 1.6.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['jquery', 'underscore', 'backbone', 'views/taskview', 'text!templates/tasks.html'], function($, _, Backbone, TaskView, tasksTemplate) {
    var TasksView, _ref;
    TasksView = (function(_super) {
      __extends(TasksView, _super);

      function TasksView() {
        this.add = __bind(this.add, this);
        this.render = __bind(this.render, this);
        _ref = TasksView.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      TasksView.prototype.initialize = function() {
        this.render();
        this.model.on('change:tag', this.render);
        return this.model.tasks.on('add', this.add);
      };

      TasksView.prototype.template = _.template(tasksTemplate);

      TasksView.prototype.sum = 0;

      TasksView.prototype.render = function() {
        var _this = this;
        this.$el.html(this.template(this.model.toJSON()));
        this.sum = 0;
        return this.model.tasks.each(function(task) {
          var tag, view;
          if (_this.model.get("tag") != null) {
            tag = _this.model.get("tag");
            if ((task.attributes.tags != null) && _.contains(task.attributes.tags, tag)) {
              _this.sum += task.get("time");
              view = new TaskView({
                model: task
              });
              _this.$el.find("#timeline").append(view.render().el);
            }
          } else {
            _this.sum += task.get("time");
            view = new TaskView({
              model: task
            });
            _this.$el.find("#timeline").append(view.render().el);
          }
          return _this.$el.find("#sum").text(_this.sum);
        });
      };

      TasksView.prototype.add = function(task) {
        var view;
        view = new TaskView({
          model: task
        });
        this.$el.find("#timeline").prepend(view.render().el);
        this.sum += task.get("time");
        return this.$el.find("#sum").text(this.sum);
      };

      return TasksView;

    })(Backbone.View);
    return TasksView;
  });

}).call(this);
