// Generated by CoffeeScript 1.6.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['underscore', 'backbone', 'models/taskmodel', 'libs/backbone.localstorage'], function(_, Backbone, TaskModel, Store) {
    var TasksCollection, _ref;
    TasksCollection = (function(_super) {
      __extends(TasksCollection, _super);

      function TasksCollection() {
        _ref = TasksCollection.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      TasksCollection.prototype.model = TaskModel;

      TasksCollection.prototype.url = '/tasks';

      TasksCollection.prototype.comparator = function(task) {
        return -task.get('date');
      };

      TasksCollection.prototype.localStorage = new Store('clock');

      TasksCollection.prototype.sync = function(method, model, options) {
        var resp, store;
        console.log(method, model, options);
        store = this.localStorage;
        switch (method) {
          case 'create':
            resp = store.create(model);
            break;
          case 'read':
            resp = model.id != null ? store.find(model) : store.findAll();
            break;
          case 'update':
            resp = store.update(model);
            break;
          case 'delete':
            resp = store.destroy(model);
        }
        if (resp) {
          return options.success(resp);
        }
      };

      return TasksCollection;

    })(Backbone.Collection);
    return TasksCollection;
  });

}).call(this);
